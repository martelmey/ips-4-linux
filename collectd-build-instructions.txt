Prerequisites
-------------

  To compile collectd from source you will need:

  * Usual suspects: C compiler, linker, preprocessor, make, ...

    collectd makes use of some common C99 features, e.g. compound literals and
    mixed declarations, and therefore requires a C99 compatible compiler.

    On Debian and Ubuntu, the "build-essential" package should pull in
    everything that's necessary.

  * A POSIX-threads (pthread) implementation.
    Since gathering some statistics is slow (network connections, slow devices,
    etc) collectd is parallelized. The POSIX threads interface is being
    used and should be found in various implementations for hopefully all
    platforms.

  * When building from the Git repository, flex (tokenizer) and bison (parser
    generator) are required. Release tarballs include the generated files – you
    don't need these packages in that case.

  * aerotools-ng (optional)
    Used by the `aquaero' plugin. Currently, the `libaquaero5' library, which
    is used by the `aerotools-ng' toolkit, is not compiled as a shared object
    nor does it feature an installation routine. Therefore, you need to point
    collectd's configure script at the source directory of the `aerotools-ng'
    project.
    <https://github.com/lynix/aerotools-ng>

  * CoreFoundation.framework and IOKit.framework (optional)
    For compiling on Darwin in general and the `apple_sensors' plugin in
    particular.
    <http://developer.apple.com/corefoundation/>

  * CUDA (optional)
    Used by the `gpu_nvidia' plugin
    <https://developer.nvidia.com/cuda-downloads>

  * libatasmart (optional)
    Used by the `smart' plugin.
    <http://git.0pointer.de/?p=libatasmart.git>

  * libcap (optional)
    The `turbostat' plugin can optionally build Linux Capabilities support,
    which avoids full privileges requirement (aka. running as root) to read
    values.
    <http://sites.google.com/site/fullycapable/>

  * libclntsh (optional)
    Used by the `oracle' plugin.

  * libhiredis (optional)
    Used by the redis plugin. Please note that you require a 0.10.0 version
    or higher. <https://github.com/redis/hiredis>

  * libcurl (optional)
    If you want to use the `apache', `ascent', `bind', `curl', `curl_json',
    `curl_xml', `nginx', or `write_http' plugin.
    <http://curl.haxx.se/>

  * libdbi (optional)
    Used by the `dbi' plugin to connect to various databases.
    <http://libdbi.sourceforge.net/>

  * libesmtp (optional)
    For the `notify_email' plugin.
    <http://www.stafford.uklinux.net/libesmtp/>

  * libganglia (optional)
    Used by the `gmond' plugin to process data received from Ganglia.
    <http://ganglia.info/>

  * libgrpc (optional)
    Used by the `grpc' plugin. gRPC requires a C++ compiler supporting the
    C++11 standard.
    <https://grpc.io/>

  * libgcrypt (optional)
    Used by the `network' plugin for encryption and authentication.
    <http://www.gnupg.org/>

  * libgps (optional)
    Used by the `gps' plugin.
    <http://developer.berlios.de/projects/gpsd/>

  * libi2c-dev (optional)
    Used for the plugin `barometer', provides just the i2c-dev.h header file
    for user space i2c development.

  * libiptc (optional)
    For querying iptables counters.
    <http://netfilter.org/>

  * libjansson (optional)
    Parse JSON data. This is used for the `capabilities' and `dpdk_telemetry` plugins.
    <http://www.digip.org/jansson/>

  * libjevents (optional)
    The jevents library is used by the `intel_pmu' plugin to access the Linux
    kernel perf interface.
    Note: the library should be build with -fPIC flag to be linked with
    intel_pmu shared object correctly.
    <https://github.com/andikleen/pmu-tools>

  * libjvm (optional)
    Library that encapsulates the `Java Virtual Machine' (JVM). This library is
    used by the `java' plugin to execute Java bytecode.
    See docs/BUILD.java.md for detailed build instructions.
    <http://openjdk.java.net/> (and others)

  * libldap (optional)
    Used by the `openldap' plugin.
    <http://www.openldap.org/>

  * liblua (optional)
    Used by the `lua' plugin. Currently, Lua 5.1 and later are supported.
    <https://www.lua.org/>

  * libmemcached (optional)
    Used by the `memcachec' plugin to connect to a memcache daemon.
    <http://tangent.org/552/libmemcached.html>

  * libmicrohttpd (optional)
    Used by the write_prometheus plugin to run an http daemon.
    <http://www.gnu.org/software/libmicrohttpd/>

  * libmnl (optional)
    Used by the `netlink' plugin.
    <http://www.netfilter.org/projects/libmnl/>

  * libmodbus (optional)
    Used by the `modbus' plugin to communicate with Modbus/TCP devices. The
    `modbus' plugin works with version 2.0.3 of the library – due to frequent
    API changes other versions may or may not compile cleanly.
    <http://www.libmodbus.org/>

  * libmysqlclient (optional)
    Unsurprisingly used by the `mysql' plugin.
    <http://dev.mysql.com/>

  * libnetapp (optional)
    Required for the `netapp' plugin.
    This library is part of the “Manage ONTAP SDK” published by NetApp.

  * libnetsnmp (optional)
    For the `snmp' and 'snmp_agent' plugins.
    <http://www.net-snmp.org/>

  * libnetsnmpagent (optional)
    Required for the 'snmp_agent' plugin.
    <http://www.net-snmp.org/>

  * libnotify (optional)
    For the `notify_desktop' plugin.
    <http://www.galago-project.org/>

  * libopenipmi (optional)
    Used by the `ipmi' plugin to prove IPMI devices.
    <http://openipmi.sourceforge.net/>

  * liboping (optional)
    Used by the `ping' plugin to send and receive ICMP packets.
    <http://octo.it/liboping/>

  * libowcapi (optional)
    Used by the `onewire' plugin to read values from onewire sensors (or the
    owserver(1) daemon).
    <http://www.owfs.org/>

  * libpcap (optional)
    Used to capture packets by the `dns' plugin.
    <http://www.tcpdump.org/>

  * libperfstat (optional)
    Used by various plugins to gather statistics under AIX.

  * libperl (optional)
    Obviously used by the `perl' plugin. The library has to be compiled with
    ithread support (introduced in Perl 5.6.0).
    <http://www.perl.org/>

  * libpmwapi (optional)
    Used by the `dcpmm` plugin.
    The library github: https://github.com/intel/intel-pmwatch
    Follow the pmwatch build instructions mentioned for dcpmm plugin and
    use the install path to resolve the dependency here.

  * libpq (optional)
    The PostgreSQL C client library used by the `postgresql' plugin.
    <http://www.postgresql.org/>

  * libpqos (optional)
    The PQoS library for Intel(R) Resource Director Technology used by the
    `intel_rdt' plugin.
    <https://github.com/01org/intel-cmt-cat>

  * libprotobuf, protoc 3.0+ (optional)
    Used by the `grpc' plugin to generate service stubs and code to handle
    network packets of collectd's protobuf-based network protocol.
    <https://developers.google.com/protocol-buffers/>

  * libprotobuf-c, protoc-c (optional)
    Used by the `pinba' plugin to generate a parser for the network packets
    sent by the Pinba PHP extension.
    <http://code.google.com/p/protobuf-c/>

  * libpython (optional)
    Used by the `python' plugin. Currently, Python 2.6 and later and Python 3
    are supported.
    <http://www.python.org/>

  * libqpid-proton (optional)
    Used by the `amqp1' plugin for AMQP 1.0 connections, for example to
    Qdrouterd.
    <http://qpid.apache.org/>

  * librabbitmq (optional; also called “rabbitmq-c”)
    Used by the `amqp' plugin for AMQP 0.9.1 connections, for example to
    RabbitMQ.
    <http://hg.rabbitmq.com/rabbitmq-c/>

  * librdkafka (optional; also called “rdkafka”)
    Used by the `write_kafka' plugin for producing messages and sending them
    to a Kafka broker.
    <https://github.com/edenhill/librdkafka>

  * librouteros (optional)
    Used by the `routeros' plugin to connect to a device running `RouterOS'.
    <http://octo.it/librouteros/>

  * librrd (optional)
    Used by the `rrdtool' and `rrdcached' plugins. The latter requires RRDtool
    client support which was added after version 1.3 of RRDtool. Versions 1.0,
    1.2 and 1.3 are known to work with the `rrdtool' plugin.
    <http://oss.oetiker.ch/rrdtool/>

  * librt, libsocket, libkstat, libdevinfo (optional)
    Various standard Solaris libraries which provide system functions.
    <http://developers.sun.com/solaris/>

  * libsensors (optional)
    To read from `lm_sensors', see the `sensors' plugin.
    <http://www.lm-sensors.org/>

  * libsigrok (optional)
    Used by the `sigrok' plugin. In addition, libsigrok depends on glib,
    libzip, and optionally (depending on which drivers are enabled) on
    libusb, libftdi and libudev.

  * libslurm (optional)
    Used by the `slurm` plugin.
    <https://slurm.schedmd.com/>

  * libstatgrab (optional)
    Used by various plugins to collect statistics on systems other than Linux
    and/or Solaris.
    <http://www.i-scream.org/libstatgrab/>

  * libtokyotyrant (optional)
    Used by the `tokyotyrant' plugin.
    <http://1978th.net/tokyotyrant/>

  * libupsclient/nut (optional)
    For the `nut' plugin which queries nut's `upsd'.
    <http://networkupstools.org/>

  * libvirt (optional)
    Collect statistics from virtual machines.
    <http://libvirt.org/>

  * libxml2 (optional)
    Parse XML data. This is needed for the `ascent', `bind', `curl_xml' and
    `virt' plugins.
    <http://xmlsoft.org/>

  * libxen (optional)
    Used by the `xencpu' plugin.
    <http://xenbits.xensource.com/>

  * libxmms (optional)
    <http://www.xmms.org/>

  * libyajl (optional)
    Parse JSON data. This is needed for the `ceph', `curl_json', 'ovs_events',
    'ovs_stats' and `log_logstash' plugins.
    <http://github.com/lloyd/yajl>

  * libvarnish (optional)
     Fetches statistics from a Varnish instance. This is needed for the
     `varnish' plugin.
     <http://varnish-cache.org>

  * riemann-c-client (optional)
     For the `write_riemann' plugin.
     <https://github.com/algernon/riemann-c-client>

Configuring / Compiling / Installing
------------------------------------

  To configure, build and install collectd with the default settings, run
  `./configure && make && make install'.  For a complete list of configure
  options and their description, run `./configure --help'.

  By default, the configure script will check for all build dependencies and
  disable all plugins whose requirements cannot be fulfilled (any other plugin
  will be enabled). To enable a plugin, install missing dependencies (see
  section `Prerequisites' above) and rerun `configure'. If you specify the
  `--enable-<plugin>' configure option, the script will fail if the depen-
  dencies for the specified plugin are not met. In that case you can force the
  plugin to be built using the `--enable-<plugin>=force' configure option.
  This will most likely fail though unless you're working in a very unusual
  setup and you really know what you're doing. If you specify the
  `--disable-<plugin>' configure option, the plugin will not be built. If you
  specify the `--enable-all-plugins' or `--disable-all-plugins' configure
  options, all plugins will be enabled or disabled respectively by default.
  Explicitly enabling or disabling a plugin overwrites the default for the
  specified plugin. These options are meant for package maintainers and should
  not be used in everyday situations.

  By default, collectd will be installed into `/opt/collectd'. You can adjust
  this setting by specifying the `--prefix' configure option - see INSTALL for
  details. If you pass DESTDIR=<path> to `make install', <path> will be
  prefixed to all installation directories. This might be useful when creating
  packages for collectd.

Generating the configure script
-------------------------------

Collectd ships with a `build.sh' script to generate the `configure'
script shipped with releases.

To generate the `configure` script, you'll need the following dependencies:

- autoconf
- automake
- flex
- bison
- libtool
- pkg-config

The `build.sh' script takes no arguments.

Crosscompiling
--------------

  To compile correctly collectd needs to be able to initialize static
  variables to NAN (Not A Number). Some C libraries, especially the GNU
  libc, have a problem with that.

  Luckily, with GCC it's possible to work around that problem: One can define
  NAN as being (0.0 / 0.0) and `isnan' as `f != f'. However, to test this
  ``implementation'' the configure script needs to compile and run a short
  test program. Obviously running a test program when doing a cross-
  compilation is, well, challenging.

  If you run into this problem, you can use the `--with-nan-emulation'
  configure option to force the use of this implementation. We can't promise
  that the compiled binary actually behaves as it should, but since NANs
  are likely never passed to the libm you have a good chance to be lucky.

  Likewise, collectd needs to know the layout of doubles in memory, in order
  to craft uniform network packets over different architectures. For this, it
  needs to know how to convert doubles into the memory layout used by x86. The
  configure script tries to figure this out by compiling and running a few
  small test programs. This is of course not possible when cross-compiling.
  You can use the `--with-fp-layout' option to tell the configure script which
  conversion method to assume. Valid arguments are:

    * `nothing'    (12345678 -> 12345678)
    * `endianflip' (12345678 -> 87654321)
    * `intswap'    (12345678 -> 56781234)
